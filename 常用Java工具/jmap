jmap
用来对Java进程中的内存映射和堆内存的细节进行打印，是实验性质。
使用方式：
 jmap -heap pid 打印一个Java进程的堆内存的信息。
 Attaching to process ID 26575, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.11-b03

using thread-local object allocation.
Garbage-First (G1) GC with 2 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 40   #Java堆内存最小空闲比
   MaxHeapFreeRatio         = 70   #Java堆内存最大空闲比
   MaxHeapSize              = 536870912 (512.0MB)  #堆的最大内存-XX:MaxHeapSize=
   NewSize                  = 1363144 (1.2999954223632812MB)  #-XX:NewSize= 设置新生堆的大小
   MaxNewSize               = 321912832 (307.0MB)
   OldSize                  = 5452592 (5.1999969482421875MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 1048576 (1.0MB)

Heap Usage:
G1 Heap:
   regions  = 512
   capacity = 536870912 (512.0MB)
   used     = 10004976 (9.541488647460938MB)
   free     = 526865936 (502.45851135253906MB)
   1.8635720014572144% used
G1 Young Generation:
Eden Space:
   regions  = 6
   capacity = 24117248 (23.0MB)
   used     = 6291456 (6.0MB)
   free     = 17825792 (17.0MB)
   26.08695652173913% used
Survivor Space:
   regions  = 4
   capacity = 4194304 (4.0MB)
   used     = 4194304 (4.0MB)
   free     = 0 (0.0MB)
   100.0% used
G1 Old Generation:
   regions  = 0
   capacity = 508559360 (485.0MB)
   used     = 0 (0.0MB)
   free     = 508559360 (485.0MB)
   0.0% used

3653 interned Strings occupying 288264 bytes.
